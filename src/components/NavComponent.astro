---
import { Image } from 'astro:assets'
import logoForLight from '@/images/astro-logo-for-light-mode.svg'
import logoForDark from '@/images/astro-logo-for-dark-mode.svg'

const navigation = [
  { href: '/#projects', title: 'Projects', newTab: false },
  { href: '/#about', title: 'About', newTab: false },
  { href: '/#contact', title: 'Contact', newTab: false },
  { href: '/tags', title: 'Tags', newTab: false },
  { href: '/blog', title: 'Blog', newTab: false },
]

const pathname = Astro.url.pathname.split('/')[1]
---

<header
  class="fixed bg-white dark:bg-slate-900 dark:text-gray-100 top-0 left-0 w-full z-40 border-t-[14px] border-indigo-600"
>
  <nav
    class="container mx-auto flex flex-wrap items-center justify-between py-6 px-4 xl:px-0"
  >
    <div>
      <a href="/">
        <Image
          src={logoForLight}
          alt="logo"
          id="logoForLight"
          class="w-auto h-12 hidden"
        />
        <Image
          src={logoForDark}
          alt="logo"
          id="logoForDark"
          class="w-auto h-12 hidden"
        />
      </a>
    </div>

    <div class="block lg:hidden">
      <button id="hamburgerMenu">
        <svg
          id="hamburgerIcon"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          aria-hidden="true"
          class="w-8 h-8"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
        </svg>
      </button>
    </div>
    <ul
      id="mobileNav"
      class="hidden uppercase tracking-wide font-bold w-full flex-grow lg:space-x-8 space-y-6 lg:space-y-0 lg:flex lg:flex-initial lg:w-auto items-center mt-8 lg:mt-0"
    >
      <li>
        <a
          href="#"
          class="hover:text-gray-500 dark:hover:text-gray-300"
          id="themeToggle"
        >
          <svg
            id="sunIcon"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            aria-hidden="true"
            class="hidden w-6 h-6"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z"
            ></path>
          </svg>
          <svg
            id="moonIcon"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            aria-hidden="true"
            class="hidden w-6 h-6"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M21.752 15.002A9.718 9.718 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z"
            ></path>
          </svg>
        </a>
      </li>
      {
        navigation.map(nav => (
          <li>
            {!nav.newTab && (
              <a
                href={nav.href}
                class:list={[
                  'hover:text-gray-500 menuItem dark:hover:text-gray-300',
                  {
                    'underline underline-offset-4 decoration-wavy':
                      (pathname && nav.href.includes(pathname)) ||
                      (pathname === 'posts' && nav.href === '/blog'),
                  },
                ]}
              >
                {nav.title}
              </a>
            )}

            {nav.newTab && (
              <a
                href={nav.href}
                class="hover:text-gray-500 menuItem dark:hover:text-gray-300"
                target="_blank"
                rel="noopener noreferrer"
              >
                {nav.title}
              </a>
            )}
          </li>
        ))
      }
    </ul>
  </nav>
</header>

<script>
  function getTheme() {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme') || ''
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark'
    }
    return 'light'
  }

  document.addEventListener('astro:page-load', () => {
    const moonIcon = document.querySelector('#moonIcon') as Element
    const sunIcon = document.querySelector('#sunIcon') as Element
    const logoForLight = document.querySelector('#logoForLight') as Element
    const logoForDark = document.querySelector('#logoForDark') as Element

    const themeToggle = document.querySelector('#themeToggle') as Element
    const mobileNav = document.querySelector('#mobileNav') as Element
    const hamburgerMenu = document.querySelector('#hamburgerMenu') as Element

    const theme = getTheme()
    setInitialTheme(theme)

    themeToggle.addEventListener('click', handleToggleTheme)

    hamburgerMenu.addEventListener('click', handleToggleMobileNav)

    document.addEventListener('keydown', handleEscapeKeyPress)

    mobileNav.addEventListener('click', handleMobileNavClick as EventListener)

    document.addEventListener('click', handleClickOutside)

    function handleClickOutside(event: MouseEvent) {
      const isClickInside = mobileNav.contains(event.target as Node)

      if (!isClickInside) {
        if (!hamburgerMenu.contains(event.target as Node)) {
          mobileNav.classList.add('hidden')
        }
      }
    }

    function handleMobileNavClick(event: MouseEvent) {
      const { target } = event

      if (target instanceof HTMLElement) {
        if (target.tagName === 'A' || target.classList.contains('menuItem')) {
          mobileNav.classList.add('hidden')
        }
      }
    }

    function handleEscapeKeyPress(event: KeyboardEvent) {
      if (event.key === 'Escape') {
        mobileNav.classList.add('hidden')
      }
    }

    function handleToggleMobileNav() {
      mobileNav.classList.toggle('hidden')
    }

    function setInitialTheme(theme: string) {
      if (theme === 'light') {
        document.documentElement.classList.remove('dark')
        logoForLight.classList.remove('hidden')
        moonIcon.classList.remove('hidden')
      } else {
        document.documentElement.classList.add('dark')
        logoForDark.classList.remove('hidden')
        sunIcon.classList.remove('hidden')
      }

      window.localStorage.setItem('theme', theme)
    }

    function handleToggleTheme(event: Event) {
      event.preventDefault()

      document.documentElement.classList.toggle('dark')

      const isDark = document.documentElement.classList.contains('dark')

      localStorage.setItem('theme', isDark ? 'dark' : 'light')

      if (isDark) {
        logoForDark.classList.remove('hidden')
        logoForLight.classList.add('hidden')
        moonIcon.classList.add('hidden')
        sunIcon.classList.remove('hidden')
      } else {
        logoForDark.classList.add('hidden')
        logoForLight.classList.remove('hidden')
        moonIcon.classList.remove('hidden')
        sunIcon.classList.add('hidden')
      }

      mobileNav.classList.add('hidden')
    }
  })

  // For view transitions to work without FOUC
  document.addEventListener('astro:after-swap', () => {
    const moonIcon = document.querySelector('#moonIcon') as Element
    const sunIcon = document.querySelector('#sunIcon') as Element
    const logoForLight = document.querySelector('#logoForLight') as Element
    const logoForDark = document.querySelector('#logoForDark') as Element

    const theme = getTheme()
    setInitialTheme(theme)

    function setInitialTheme(theme: string) {
      if (theme === 'light') {
        document.documentElement.classList.remove('dark')
        logoForLight.classList.remove('hidden')
        moonIcon.classList.remove('hidden')
      } else {
        document.documentElement.classList.add('dark')
        logoForDark.classList.remove('hidden')
        sunIcon.classList.remove('hidden')
      }

      window.localStorage.setItem('theme', theme)
    }
  })
</script>
